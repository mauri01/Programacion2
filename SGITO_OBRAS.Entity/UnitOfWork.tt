<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.IO" #>
<# string fileName = this.Host.ResolvePath("./CodeTemplates/Tablas.txt");
  string [] properties = File.ReadLines(fileName).ToArray();
  fileName = this.Host.ResolvePath("./CodeTemplates/NombreProyecto.txt");
  string proyecto = File.ReadLines(fileName).ToArray()[0];
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using <#=proyecto#>.Entity.Repository;
using <#=proyecto#>.Entity.Repository.Interface;

namespace <#=proyecto#>.Entity
{
	public class UnitOfWork: IUnitOfWork, IDisposable
	{
		private <#=proyecto#>Context context = new <#=proyecto#>Context();
		<# foreach (string propertyName in properties) { #>
		<# string loweredPropertyName = propertyName.ToLower().Substring(0,1) + propertyName.Substring(1); #>
		private Repository<<#= propertyName #>> <#= loweredPropertyName  #>Repository;
		public IRepository<<#= propertyName #>> <#= propertyName #>Repository
		{
			get
			{
				if (this.<#= loweredPropertyName  #>Repository == null)
				{
					this.<#= loweredPropertyName  #>Repository = new Repository<<#= propertyName  #>>(context);
				}
				return <#= loweredPropertyName  #>Repository;
			}
		}
		<# } #>

        public int Save()
		{
			return context.SaveChanges();
		}

		private bool disposed = false;

		protected virtual void Dispose(bool disposing)
		{
			if (!this.disposed)
			{
				if (disposing)
				{
					context.Dispose();
				}
			}
			this.disposed = true;
		}

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

	}
}
